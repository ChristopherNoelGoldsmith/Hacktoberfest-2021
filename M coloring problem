In this  problem there is  an undirected graph and a number m, determine if the graph can be coloured with at most m colours such that no two adjacent vertices of the graph are colored with the same color.
The M – colorability optimization problem deals with the smallest integer m for which the graph G can be colored. The integer is known as a chromatic number of the graph.The least possible value of ‘m‘ required to color the graph successfully is known as the chromatic number of the given graph.
Backtracking algorithm makes the process to solve the problem more efficient by avoiding much bad decision that needed to be made in the naive approach.We start by coloring a single vertex, then we move to its adjacent vertex. We color it with that color which has not been used to color any of its connected vertices. After coloring it we then move to its adjacent vertex which is uncolored. We repeat the process until all vertices of the given graph are colored.In case we find for a vertex that all its adjacent (connected) are colored with different colors and no color is left to make it color different from them, then it means the given number of colors i.e ‘m’, is insufficient to color the graph. Hence we require more colors i.e bigger chromatic number.
//Code of m colouring
#include<stdio.h>
int nextvalue(int k,int x[],int n,int a[][20],int m)
{
 int j;
 do
 {
   x[k]=(x[k]+1)%(m+1);
   if(x[k]==0)
     return 0;
   for(j=1;j<=n;j++)
   {
     if(a[k][j]

