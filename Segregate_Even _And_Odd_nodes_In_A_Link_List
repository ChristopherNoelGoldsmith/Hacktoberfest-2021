#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data <<" "; 
        node = node->next; 
    }  
    cout<<"\n";
} 


 // } Driver Code Ends
//User function template for C++

/*
struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};
*/
class Solution{
public:
    Node* divide(int N, Node *head){
     Node *evenStart=NULL, *evenNode=NULL;
       Node *oddStart=NULL, *oddNode=NULL;
       for(Node *curr=head; curr!=NULL; curr=curr->next)
       {
           int x= curr->data;
           if(x%2==0)
           {
               if(evenStart==NULL)
               {
                   evenStart=curr;
                   evenNode=curr;
               }
               else{
                   evenNode->next=curr;
                   evenNode=evenNode->next;
               }
           }
           else{
               if(oddStart==NULL)
               {
                   oddStart=curr;
                   oddNode=curr;
               }
               else
               {
                   oddNode->next=curr;
                   oddNode=oddNode->next;
               }
           }
           
       }
       if(evenStart==NULL || oddStart==NULL)
       return head;
       evenNode->next=oddStart;
       oddNode->next=NULL;
       return evenStart;   // code here
    }
};

// { Driver Code Starts.

int main() {
    //code
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        int data;
        cin>>data;
        struct Node *head = new Node(data);
        struct Node *tail = head;
        for (int i = 0; i < N-1; ++i)
        {
            cin>>data;
            tail->next = new Node(data);
            tail = tail->next;
        }
        
        Solution ob;
        Node *ans = ob.divide(N, head);
        printList(ans); 
    }
    return 0;
}
